#!/usr/bin/env perl

use FindBin;
# PERL5LIB
use lib "$FindBin::Bin/../../lib/amd64";
use strict;
use warnings;

use File::Basename;
use IO::Socket::UNIX qw(SOCK_STREAM);
use KVMadm::Config;

#SMF constants
my %SMF_STATUS = (
    SMF_EXIT_OK          => 0,
    SMF_EXIT_ERR_FATAL   => 95,
    SMF_EXIT_ERR_CONFIG  => 96,
    SMF_EXIT_MON_DEGRADE => 97,
    SMF_EXIT_MON_OFFLINE => 98,
    SMF_EXIT_ERR_NOSMF   => 99,
    SMF_EXIT_ERR_PERM    => 100,
);

my $RUN_PATH = '/var/run/kvm';
my $FMRI     = 'svc:/system/kvm';


# check if FMRI is set
$ENV{SMF_FMRI} || do {
    print "SMF framework variables are not initialised.\n";
    exit $SMF_STATUS{SMF_EXIT_ERR_FATAL};
};

# check if run directory exists
-d $RUN_PATH || mkdir($RUN_PATH) || do {
    print "Cannot create directory $RUN_PATH\n";
    exit $SMF_STATUS{SMF_EXIT_ERR_FATAL};   
};

my ($kvmName) = $ENV{SMF_FMRI} =~ /^$FMRI:(\w+)$/;

for (shift){
    /^start$/ && do {
        my $config = KVMadm::Config->new();
        my @cmdArray;

        local $@;
        eval {
            local $SIG{__DIE__};
            @cmdArray = @{$config->getKVMCmdArray($kvmName)};
        };
        if($@){
            print "$@\n";
            exit $SMF_STATUS{SMF_EXIT_ERR_CONFIG};
        }

        system(@cmdArray) && do {
            print "Cannot run KVM $kvmName\n";
            exit $SMF_STATUS{SMF_EXIT_ERR_FATAL};
        };
        last;
    };

    /^stop$/ && do {
        #get the qemu pid
        open PIDFILE,  $RUN_PATH . '/' . $kvmName . '.pid' || do {
            print "Cannot read pid $!\n";
            exit $SMF_STATUS{SMF_EXIT_ERR_FATAL};
        };
        my @qemu_pid = <PIDFILE>;
        chomp(@qemu_pid);
        my $qemu_pid = $qemu_pid[0];
        close PIDFILE;

        #acpi shutdown
        my $have_sock = 1;
        my $sock = IO::Socket::UNIX->new(
            Type => SOCK_STREAM,
            Peer => $RUN_PATH . '/' . $kvmName . '.monitor',
	) || do { $have_sock = 0 };
        if ($have_sock) {
            print $sock "system_powerdown\n";
            my $counter = 90;
            #wait for 90 seconds
            while ($counter){
                sleep 1 if (kill 0, $qemu_pid);
                $counter--;
            }  
        } else {
            print "Failed to send acpi shutdown!\n";
        }

        #kill the process
        kill 15, $qemu_pid if (kill 0, $qemu_pid);

        #cleanup
        unlink glob $RUN_PATH . '/' . $kvmName . '.*';

        last;
    };

    #default
    print 'usage: ' . basename($0) . " { start | stop }\n";
    exit $SMF_STATUS{SMF_EXIT_ERR_FATAL};
}

exit $SMF_STATUS{SMF_EXIT_OK};

1;

__END__

=head1 COPYRIGHT

Copyright (c) 2014 by OETIKER+PARTNER AG. All rights reserved.

=head1 LICENSE

This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=head1 AUTHOR

S<Tobias Oetiker E<lt>tobi@oetiker.chE<gt>>
S<Dominik Hassler E<lt>hadfl@cpan.orgE<gt>>

=head1 HISTORY

2014-11-06 had Initial Version

=cut
